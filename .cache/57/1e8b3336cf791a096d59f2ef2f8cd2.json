{"id":"node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","dependencies":[{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-backend-cpu\\dist\\utils\\unary_impl.js.map","includedInParent":true,"mtime":1618542801524},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\utils\\unary_impl.ts","includedInParent":true,"mtime":1618542801655},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\package.json","includedInParent":true,"mtime":1618542826354},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-backend-cpu\\package.json","includedInParent":true,"mtime":1618542801524},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":21},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-backend-cpu\\dist\\utils\\unary_impl.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSimpleUnaryImpl = createSimpleUnaryImpl;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * Template that creates implementation for unary op.\r\n */\nfunction createSimpleUnaryImpl(op) {\n  return (values, dtype, attrs) => {\n    const newValues = _tfjsCore.util.getTypedArrayFromDType(dtype, values.length);\n\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n\n    return newValues;\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":27,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":25,"column":6},"generated":{"line":30,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":25,"column":16},"generated":{"line":30,"column":9}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":25,"column":6},"generated":{"line":30,"column":30}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":25,"column":38},"generated":{"line":30,"column":31}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":25,"column":6},"generated":{"line":30,"column":33}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":25,"column":62},"generated":{"line":30,"column":35}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":31,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":31,"column":9}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":10},"generated":{"line":31,"column":10}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":31,"column":16}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":18},"generated":{"line":31,"column":18}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":31,"column":23}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":25},"generated":{"line":31,"column":25}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":31,"column":30}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":34},"generated":{"line":31,"column":35}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":28,"column":4},"generated":{"line":32,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":32,"column":10}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":28,"column":19},"generated":{"line":32,"column":19}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":32,"column":22}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":32,"column":37}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":32,"column":59}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":36},"generated":{"line":32,"column":60}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":32,"column":65}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":62},"generated":{"line":32,"column":67}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":68},"generated":{"line":32,"column":73}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":69},"generated":{"line":32,"column":74}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":32,"column":80}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":28,"column":4},"generated":{"line":32,"column":81}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":34,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":34,"column":9}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":13},"generated":{"line":34,"column":13}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":14},"generated":{"line":34,"column":14}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":17},"generated":{"line":34,"column":17}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":34,"column":18}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":20},"generated":{"line":34,"column":20}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":21},"generated":{"line":34,"column":21}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":24},"generated":{"line":34,"column":24}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":30},"generated":{"line":34,"column":30}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":31},"generated":{"line":34,"column":31}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":34,"column":37}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":39},"generated":{"line":34,"column":39}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":41},"generated":{"line":34,"column":41}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":34,"column":42}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":30,"column":44},"generated":{"line":34,"column":44}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":6},"generated":{"line":35,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":6},"generated":{"line":35,"column":6}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":15},"generated":{"line":35,"column":15}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":16},"generated":{"line":35,"column":16}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":15},"generated":{"line":35,"column":17}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":6},"generated":{"line":35,"column":18}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":21},"generated":{"line":35,"column":21}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":23},"generated":{"line":35,"column":23}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":24},"generated":{"line":35,"column":24}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":30},"generated":{"line":35,"column":30}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":31},"generated":{"line":35,"column":31}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":30},"generated":{"line":35,"column":32}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":23},"generated":{"line":35,"column":33}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":35},"generated":{"line":35,"column":35}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":23},"generated":{"line":35,"column":40}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":31,"column":6},"generated":{"line":35,"column":41}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":32,"column":5},"generated":{"line":36,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":38,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":33,"column":11},"generated":{"line":38,"column":11}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":33,"column":4},"generated":{"line":38,"column":20}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":34,"column":3},"generated":{"line":39,"column":0}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":39,"column":3}},{"source":"../../src/utils/unary_impl.ts","name":null,"original":{"line":35,"column":1},"generated":{"line":40,"column":0}}],"sources":{"../../src/utils/unary_impl.ts":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\r\n\r\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\r\n\r\n/**\r\n * Template that creates implementation for unary op.\r\n */\r\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\r\n    SimpleUnaryImpl {\r\n  return (values, dtype, attrs) => {\r\n    const newValues =\r\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\r\n    for (let i = 0; i < values.length; ++i) {\r\n      newValues[i] = op(values[i], attrs);\r\n    }\r\n    return newValues;\r\n  };\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"5d5c9d2a4f777368952ae519992d17cf","cacheData":{"env":{}}}