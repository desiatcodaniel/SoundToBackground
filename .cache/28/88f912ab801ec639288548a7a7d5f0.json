{"id":"node_modules/@tensorflow/tfjs-data/dist/readers.js","dependencies":[{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js.map","includedInParent":true,"mtime":1618542804997},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\src\\readers.ts","includedInParent":true,"mtime":1618542805132},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\package.json","includedInParent":true,"mtime":1618542826354},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\package.json","includedInParent":true,"mtime":1618542805121},{"name":"./dataset","loc":{"line":18,"column":38},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\dataset.js"},{"name":"./datasets/csv_dataset","loc":{"line":19,"column":27},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\datasets\\csv_dataset.js"},{"name":"./iterators/lazy_iterator","loc":{"line":20,"column":37},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\iterators\\lazy_iterator.js"},{"name":"./iterators/microphone_iterator","loc":{"line":21,"column":35},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\iterators\\microphone_iterator.js"},{"name":"./iterators/webcam_iterator","loc":{"line":22,"column":31},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\iterators\\webcam_iterator.js"},{"name":"./sources/url_data_source","loc":{"line":23,"column":30},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\readers.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-data\\dist\\sources\\url_data_source.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csv = csv;\nexports.func = func;\nexports.generator = generator;\nexports.webcam = webcam;\nexports.microphone = microphone;\n\nvar _dataset = require(\"./dataset\");\n\nvar _csv_dataset = require(\"./datasets/csv_dataset\");\n\nvar _lazy_iterator = require(\"./iterators/lazy_iterator\");\n\nvar _microphone_iterator = require(\"./iterators/microphone_iterator\");\n\nvar _webcam_iterator = require(\"./iterators/webcam_iterator\");\n\nvar _url_data_source = require(\"./sources/url_data_source\");\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\n\n/**\r\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\r\n * or local path if it's in Node environment.\r\n *\r\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\r\n * element in returned `CSVDataset` will be an object of\r\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\r\n * is a dict of labels key/value pairs. If no column is marked as label,\r\n * returns a dict of features only.\r\n *\r\n * ```js\r\n * const csvUrl =\r\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\r\n *\r\n * async function run() {\r\n *   // We want to predict the column \"medv\", which represents a median value of\r\n *   // a home (in $1000s), so we mark it as a label.\r\n *   const csvDataset = tf.data.csv(\r\n *     csvUrl, {\r\n *       columnConfigs: {\r\n *         medv: {\r\n *           isLabel: true\r\n *         }\r\n *       }\r\n *     });\r\n *\r\n *   // Number of features is the number of column names minus one for the label\r\n *   // column.\r\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\r\n *\r\n *   // Prepare the Dataset for training.\r\n *   const flattenedDataset =\r\n *     csvDataset\r\n *     .map(({xs, ys}) =>\r\n *       {\r\n *         // Convert xs(features) and ys(labels) from object form (keyed by\r\n *         // column name) to array form.\r\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\r\n *       })\r\n *     .batch(10);\r\n *\r\n *   // Define the model.\r\n *   const model = tf.sequential();\r\n *   model.add(tf.layers.dense({\r\n *     inputShape: [numOfFeatures],\r\n *     units: 1\r\n *   }));\r\n *   model.compile({\r\n *     optimizer: tf.train.sgd(0.000001),\r\n *     loss: 'meanSquaredError'\r\n *   });\r\n *\r\n *   // Fit the model using the prepared Dataset\r\n *   return model.fitDataset(flattenedDataset, {\r\n *     epochs: 10,\r\n *     callbacks: {\r\n *       onEpochEnd: async (epoch, logs) => {\r\n *         console.log(epoch + ':' + logs.loss);\r\n *       }\r\n *     }\r\n *   });\r\n * }\r\n *\r\n * await run();\r\n * ```\r\n *\r\n * @param source URL or local path to get CSV file. If it's a local path, it\r\n * must have prefix `file://` and it only works in node environment.\r\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\r\n *     of reading and decoding from CSV file(s).\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */\nfunction csv(source, csvConfig = {}) {\n  return new _csv_dataset.CSVDataset(new _url_data_source.URLDataSource(source), csvConfig);\n}\n/**\r\n * Create a `Dataset` that produces each element by calling a provided function.\r\n *\r\n * Note that repeated iterations over this `Dataset` may produce different\r\n * results, because the function will be called anew for each element of each\r\n * iteration.\r\n *\r\n * Also, beware that the sequence of calls to this function may be out of order\r\n * in time with respect to the logical order of the Dataset. This is due to the\r\n * asynchronous lazy nature of stream processing, and depends on downstream\r\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\r\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\r\n * pointer), then the order of the produced elements may be scrambled.\r\n *\r\n * ```js\r\n * let i = -1;\r\n * const func = () =>\r\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\r\n * const ds = tf.data.func(func);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param f A function that produces one data element on each call.\r\n */\n\n\nfunction func(f) {\n  const iter = (0, _lazy_iterator.iteratorFromFunction)(f);\n  return (0, _dataset.datasetFromIteratorFn)(async () => iter);\n}\n/**\r\n * Create a `Dataset` that produces each element from provided JavaScript\r\n * generator, which is a function*\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\r\n * or a function that returns an\r\n * iterator\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\r\n *\r\n * The returned iterator should have `.next()` function that returns element in\r\n * format of `{value: TensorContainer, done:boolean}`.\r\n *\r\n * Example of creating a dataset from an iterator factory:\r\n * ```js\r\n * function makeIterator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *\r\n *   const iterator = {\r\n *     next: () => {\r\n *       let result;\r\n *       if (index < numElements) {\r\n *         result = {value: index, done: false};\r\n *         index++;\r\n *         return result;\r\n *       }\r\n *       return {value: index, done: true};\r\n *     }\r\n *   };\r\n *   return iterator;\r\n * }\r\n * const ds = tf.data.generator(makeIterator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Example of creating a dataset from a generator:\r\n * ```js\r\n * function* dataGenerator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *   while (index < numElements) {\r\n *     const x = index;\r\n *     index++;\r\n *     yield x;\r\n *   }\r\n * }\r\n *\r\n * const ds = tf.data.generator(dataGenerator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param generator A Javascript generator function that returns a JavaScript\r\n *     iterator.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */\n\n\nfunction generator(generator) {\n  return (0, _dataset.datasetFromIteratorFn)(async () => {\n    const gen = await generator();\n    return (0, _lazy_iterator.iteratorFromFunction)(() => gen.next());\n  });\n}\n/**\r\n * Create an iterator that generate `Tensor`s from webcam video stream. This API\r\n * only works in Browser environment when the device has webcam.\r\n *\r\n * Note: this code snippet only works when the device has a webcam. It will\r\n * request permission to open the webcam when running.\r\n * ```js\r\n * const videoElement = document.createElement('video');\r\n * videoElement.width = 100;\r\n * videoElement.height = 100;\r\n * const cam = await tf.data.webcam(videoElement);\r\n * const img = await cam.capture();\r\n * img.print();\r\n * cam.stop();\r\n * ```\r\n *\r\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\r\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\r\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\r\n *     provided to set the generated tensor shape.\r\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\r\n *     reading and manipulating data from webcam video stream.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */\n\n\nasync function webcam(webcamVideoElement, webcamConfig) {\n  return _webcam_iterator.WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n/**\r\n * Create an iterator that generate frequency-domain spectrogram `Tensor`s from\r\n * microphone audio stream with browser's native FFT. This API only works in\r\n * browser environment when the device has microphone.\r\n *\r\n * Note: this code snippet only works when the device has a microphone. It will\r\n * request permission to open the microphone when running.\r\n * ```js\r\n * const mic = await tf.data.microphone({\r\n *   fftSize: 1024,\r\n *   columnTruncateLength: 232,\r\n *   numFramesPerSpectrogram: 43,\r\n *   sampleRateHz:44100,\r\n *   includeSpectrogram: true,\r\n *   includeWaveform: true\r\n * });\r\n * const audioData = await mic.capture();\r\n * const spectrogramTensor = audioData.spectrogram;\r\n * spectrogramTensor.print();\r\n * const waveformTensor = audioData.waveform;\r\n * waveformTensor.print();\r\n * mic.stop();\r\n * ```\r\n *\r\n * @param microphoneConfig A `MicrophoneConfig` object that contains\r\n *     configurations of reading audio data from microphone.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */\n\n\nasync function microphone(microphoneConfig) {\n  return _microphone_iterator.MicrophoneIterator.create(microphoneConfig);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":12,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":14,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":16,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":18,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":20,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":22,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":24,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":42,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":120,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":106,"column":16},"generated":{"line":120,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":120,"column":12}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":4},"generated":{"line":120,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":120,"column":19}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":25},"generated":{"line":120,"column":21}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":25},"generated":{"line":120,"column":30}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":48},"generated":{"line":120,"column":33}},{"source":"../src/readers.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":120,"column":35}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":50},"generated":{"line":120,"column":37}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":2},"generated":{"line":121,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":121,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":13},"generated":{"line":121,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":121,"column":36}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":24},"generated":{"line":121,"column":37}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":28},"generated":{"line":121,"column":41}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":24},"generated":{"line":121,"column":71}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":42},"generated":{"line":121,"column":72}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":24},"generated":{"line":121,"column":78}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":121,"column":79}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":51},"generated":{"line":121,"column":81}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":121,"column":90}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":2},"generated":{"line":121,"column":91}},{"source":"../src/readers.ts","name":null,"original":{"line":109,"column":1},"generated":{"line":122,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":111,"column":0},"generated":{"line":123,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":135,"column":6},"generated":{"line":149,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":135,"column":16},"generated":{"line":149,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":135,"column":6},"generated":{"line":149,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":136,"column":4},"generated":{"line":149,"column":14}},{"source":"../src/readers.ts","name":null,"original":{"line":135,"column":6},"generated":{"line":149,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":136,"column":58},"generated":{"line":149,"column":17}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":2},"generated":{"line":150,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":8},"generated":{"line":150,"column":8}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":12},"generated":{"line":150,"column":12}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":150,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":36},"generated":{"line":150,"column":56}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":150,"column":57}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":2},"generated":{"line":150,"column":58}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":2},"generated":{"line":151,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":151,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":31},"generated":{"line":151,"column":45}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":43},"generated":{"line":151,"column":57}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":151,"column":61}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":2},"generated":{"line":151,"column":62}},{"source":"../src/readers.ts","name":null,"original":{"line":139,"column":1},"generated":{"line":152,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":141,"column":0},"generated":{"line":153,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":201,"column":6},"generated":{"line":215,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":201,"column":16},"generated":{"line":215,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":201,"column":6},"generated":{"line":215,"column":18}},{"source":"../src/readers.ts","name":null,"original":{"line":202,"column":4},"generated":{"line":215,"column":19}},{"source":"../src/readers.ts","name":null,"original":{"line":201,"column":6},"generated":{"line":215,"column":28}},{"source":"../src/readers.ts","name":null,"original":{"line":202,"column":54},"generated":{"line":215,"column":30}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":2},"generated":{"line":216,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":9},"generated":{"line":216,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":31},"generated":{"line":216,"column":45}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":42},"generated":{"line":216,"column":57}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":4},"generated":{"line":217,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":10},"generated":{"line":217,"column":10}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":13},"generated":{"line":217,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":16},"generated":{"line":217,"column":16}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":22},"generated":{"line":217,"column":22}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":31},"generated":{"line":217,"column":31}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":4},"generated":{"line":217,"column":33}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":4},"generated":{"line":218,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":11},"generated":{"line":218,"column":11}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":32},"generated":{"line":218,"column":52}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":38},"generated":{"line":218,"column":58}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":41},"generated":{"line":218,"column":61}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":42},"generated":{"line":218,"column":62}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":38},"generated":{"line":218,"column":66}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":11},"generated":{"line":218,"column":68}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":4},"generated":{"line":218,"column":69}},{"source":"../src/readers.ts","name":null,"original":{"line":206,"column":3},"generated":{"line":219,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":9},"generated":{"line":219,"column":3}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":2},"generated":{"line":219,"column":4}},{"source":"../src/readers.ts","name":null,"original":{"line":207,"column":1},"generated":{"line":220,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":209,"column":0},"generated":{"line":221,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":239,"column":7},"generated":{"line":253,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":239,"column":22},"generated":{"line":253,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":239,"column":7},"generated":{"line":253,"column":21}},{"source":"../src/readers.ts","name":null,"original":{"line":240,"column":4},"generated":{"line":253,"column":22}},{"source":"../src/readers.ts","name":null,"original":{"line":239,"column":7},"generated":{"line":253,"column":40}},{"source":"../src/readers.ts","name":null,"original":{"line":241,"column":4},"generated":{"line":253,"column":42}},{"source":"../src/readers.ts","name":null,"original":{"line":239,"column":7},"generated":{"line":253,"column":54}},{"source":"../src/readers.ts","name":null,"original":{"line":241,"column":31},"generated":{"line":253,"column":56}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":2},"generated":{"line":254,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":254,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":24},"generated":{"line":254,"column":41}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":254,"column":47}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":31},"generated":{"line":254,"column":48}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":254,"column":66}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":51},"generated":{"line":254,"column":68}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":254,"column":80}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":2},"generated":{"line":254,"column":81}},{"source":"../src/readers.ts","name":null,"original":{"line":243,"column":1},"generated":{"line":255,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":245,"column":0},"generated":{"line":256,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":7},"generated":{"line":292,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":22},"generated":{"line":292,"column":15}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":7},"generated":{"line":292,"column":25}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":33},"generated":{"line":292,"column":26}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":7},"generated":{"line":292,"column":42}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":68},"generated":{"line":292,"column":44}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":2},"generated":{"line":293,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":9},"generated":{"line":293,"column":9}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":28},"generated":{"line":293,"column":49}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":9},"generated":{"line":293,"column":55}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":35},"generated":{"line":293,"column":56}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":9},"generated":{"line":293,"column":72}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":2},"generated":{"line":293,"column":73}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":294,"column":0}}],"sources":{"../src/readers.ts":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\r\n\r\nimport {TensorContainer} from '@tensorflow/tfjs-core';\r\nimport {Dataset, datasetFromIteratorFn} from './dataset';\r\nimport {CSVDataset} from './datasets/csv_dataset';\r\nimport {iteratorFromFunction} from './iterators/lazy_iterator';\r\nimport {MicrophoneIterator} from './iterators/microphone_iterator';\r\nimport {WebcamIterator} from './iterators/webcam_iterator';\r\nimport {URLDataSource} from './sources/url_data_source';\r\nimport {CSVConfig, MicrophoneConfig, WebcamConfig} from './types';\r\n\r\n/**\r\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\r\n * or local path if it's in Node environment.\r\n *\r\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\r\n * element in returned `CSVDataset` will be an object of\r\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\r\n * is a dict of labels key/value pairs. If no column is marked as label,\r\n * returns a dict of features only.\r\n *\r\n * ```js\r\n * const csvUrl =\r\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\r\n *\r\n * async function run() {\r\n *   // We want to predict the column \"medv\", which represents a median value of\r\n *   // a home (in $1000s), so we mark it as a label.\r\n *   const csvDataset = tf.data.csv(\r\n *     csvUrl, {\r\n *       columnConfigs: {\r\n *         medv: {\r\n *           isLabel: true\r\n *         }\r\n *       }\r\n *     });\r\n *\r\n *   // Number of features is the number of column names minus one for the label\r\n *   // column.\r\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\r\n *\r\n *   // Prepare the Dataset for training.\r\n *   const flattenedDataset =\r\n *     csvDataset\r\n *     .map(({xs, ys}) =>\r\n *       {\r\n *         // Convert xs(features) and ys(labels) from object form (keyed by\r\n *         // column name) to array form.\r\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\r\n *       })\r\n *     .batch(10);\r\n *\r\n *   // Define the model.\r\n *   const model = tf.sequential();\r\n *   model.add(tf.layers.dense({\r\n *     inputShape: [numOfFeatures],\r\n *     units: 1\r\n *   }));\r\n *   model.compile({\r\n *     optimizer: tf.train.sgd(0.000001),\r\n *     loss: 'meanSquaredError'\r\n *   });\r\n *\r\n *   // Fit the model using the prepared Dataset\r\n *   return model.fitDataset(flattenedDataset, {\r\n *     epochs: 10,\r\n *     callbacks: {\r\n *       onEpochEnd: async (epoch, logs) => {\r\n *         console.log(epoch + ':' + logs.loss);\r\n *       }\r\n *     }\r\n *   });\r\n * }\r\n *\r\n * await run();\r\n * ```\r\n *\r\n * @param source URL or local path to get CSV file. If it's a local path, it\r\n * must have prefix `file://` and it only works in node environment.\r\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\r\n *     of reading and decoding from CSV file(s).\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */\r\nexport function csv(\r\n    source: RequestInfo, csvConfig: CSVConfig = {}): CSVDataset {\r\n  return new CSVDataset(new URLDataSource(source), csvConfig);\r\n}\r\n\r\n/**\r\n * Create a `Dataset` that produces each element by calling a provided function.\r\n *\r\n * Note that repeated iterations over this `Dataset` may produce different\r\n * results, because the function will be called anew for each element of each\r\n * iteration.\r\n *\r\n * Also, beware that the sequence of calls to this function may be out of order\r\n * in time with respect to the logical order of the Dataset. This is due to the\r\n * asynchronous lazy nature of stream processing, and depends on downstream\r\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\r\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\r\n * pointer), then the order of the produced elements may be scrambled.\r\n *\r\n * ```js\r\n * let i = -1;\r\n * const func = () =>\r\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\r\n * const ds = tf.data.func(func);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param f A function that produces one data element on each call.\r\n */\r\nexport function func<T extends TensorContainer>(\r\n    f: () => IteratorResult<T>| Promise<IteratorResult<T>>): Dataset<T> {\r\n  const iter = iteratorFromFunction(f);\r\n  return datasetFromIteratorFn(async () => iter);\r\n}\r\n\r\n/**\r\n * Create a `Dataset` that produces each element from provided JavaScript\r\n * generator, which is a function*\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\r\n * or a function that returns an\r\n * iterator\r\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\r\n *\r\n * The returned iterator should have `.next()` function that returns element in\r\n * format of `{value: TensorContainer, done:boolean}`.\r\n *\r\n * Example of creating a dataset from an iterator factory:\r\n * ```js\r\n * function makeIterator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *\r\n *   const iterator = {\r\n *     next: () => {\r\n *       let result;\r\n *       if (index < numElements) {\r\n *         result = {value: index, done: false};\r\n *         index++;\r\n *         return result;\r\n *       }\r\n *       return {value: index, done: true};\r\n *     }\r\n *   };\r\n *   return iterator;\r\n * }\r\n * const ds = tf.data.generator(makeIterator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Example of creating a dataset from a generator:\r\n * ```js\r\n * function* dataGenerator() {\r\n *   const numElements = 10;\r\n *   let index = 0;\r\n *   while (index < numElements) {\r\n *     const x = index;\r\n *     index++;\r\n *     yield x;\r\n *   }\r\n * }\r\n *\r\n * const ds = tf.data.generator(dataGenerator);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * @param generator A Javascript generator function that returns a JavaScript\r\n *     iterator.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   configParamIndices: [1]\r\n *  }\r\n */\r\nexport function generator<T extends TensorContainer>(\r\n    generator: () => Iterator<T>| Promise<Iterator<T>>): Dataset<T> {\r\n  return datasetFromIteratorFn(async () => {\r\n    const gen = await generator();\r\n    return iteratorFromFunction(() => gen.next());\r\n  });\r\n}\r\n\r\n/**\r\n * Create an iterator that generate `Tensor`s from webcam video stream. This API\r\n * only works in Browser environment when the device has webcam.\r\n *\r\n * Note: this code snippet only works when the device has a webcam. It will\r\n * request permission to open the webcam when running.\r\n * ```js\r\n * const videoElement = document.createElement('video');\r\n * videoElement.width = 100;\r\n * videoElement.height = 100;\r\n * const cam = await tf.data.webcam(videoElement);\r\n * const img = await cam.capture();\r\n * img.print();\r\n * cam.stop();\r\n * ```\r\n *\r\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\r\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\r\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\r\n *     provided to set the generated tensor shape.\r\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\r\n *     reading and manipulating data from webcam video stream.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */\r\nexport async function webcam(\r\n    webcamVideoElement?: HTMLVideoElement,\r\n    webcamConfig?: WebcamConfig): Promise<WebcamIterator> {\r\n  return WebcamIterator.create(webcamVideoElement, webcamConfig);\r\n}\r\n\r\n/**\r\n * Create an iterator that generate frequency-domain spectrogram `Tensor`s from\r\n * microphone audio stream with browser's native FFT. This API only works in\r\n * browser environment when the device has microphone.\r\n *\r\n * Note: this code snippet only works when the device has a microphone. It will\r\n * request permission to open the microphone when running.\r\n * ```js\r\n * const mic = await tf.data.microphone({\r\n *   fftSize: 1024,\r\n *   columnTruncateLength: 232,\r\n *   numFramesPerSpectrogram: 43,\r\n *   sampleRateHz:44100,\r\n *   includeSpectrogram: true,\r\n *   includeWaveform: true\r\n * });\r\n * const audioData = await mic.capture();\r\n * const spectrogramTensor = audioData.spectrogram;\r\n * spectrogramTensor.print();\r\n * const waveformTensor = audioData.waveform;\r\n * waveformTensor.print();\r\n * mic.stop();\r\n * ```\r\n *\r\n * @param microphoneConfig A `MicrophoneConfig` object that contains\r\n *     configurations of reading audio data from microphone.\r\n *\r\n * @doc {\r\n *   heading: 'Data',\r\n *   subheading: 'Creation',\r\n *   namespace: 'data',\r\n *   ignoreCI: true\r\n *  }\r\n */\r\nexport async function microphone(microphoneConfig?: MicrophoneConfig):\r\n    Promise<MicrophoneIterator> {\r\n  return MicrophoneIterator.create(microphoneConfig);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"2eff1cefe67203182f0c0ac5ac3fad93","cacheData":{"env":{}}}