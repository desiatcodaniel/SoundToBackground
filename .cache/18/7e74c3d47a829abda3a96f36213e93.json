{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/split.js","dependencies":[{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\split.js.map","includedInParent":true,"mtime":1618542803954},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\split.ts","includedInParent":true,"mtime":1618542804838},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\package.json","includedInParent":true,"mtime":1618542826354},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1618542804579},{"name":"../engine","loc":{"line":17,"column":23},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\split.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\engine.js"},{"name":"../kernel_names","loc":{"line":18,"column":23},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\split.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernel_names.js"},{"name":"../tensor_util_env","loc":{"line":19,"column":32},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\split.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\tensor_util_env.js"},{"name":"./operation","loc":{"line":20,"column":19},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\split.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\operation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.split = void 0;\n\nvar _engine = require(\"../engine\");\n\nvar _kernel_names = require(\"../kernel_names\");\n\nvar _tensor_util_env = require(\"../tensor_util_env\");\n\nvar _operation = require(\"./operation\");\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * Splits a `tf.Tensor` into sub tensors.\r\n *\r\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\r\n * into `numOrSizeSplits` smaller tensors.\r\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\r\n *\r\n * If `numOrSizeSplits` is a number array, splits `x` into\r\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\r\n * same size as `x` except along dimension `axis` where the size is\r\n * `numOrSizeSplits[i]`.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\r\n * const [a, b] = tf.split(x, 2, 1);\r\n * a.print();\r\n * b.print();\r\n *\r\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\r\n * c.print();\r\n * d.print();\r\n * e.print();\r\n * ```\r\n *\r\n * @param x The input tensor to split.\r\n * @param numOrSizeSplits Either an integer indicating the number of\r\n * splits along the axis or an array of integers containing the sizes of\r\n * each output tensor along the axis. If a number then it must evenly divide\r\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\r\n * Can contain one -1 indicating that dimension is to be inferred.\r\n * @param axis The dimension along which to split. Defaults to 0 (the first\r\n * dim).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction split_(x, numOrSizeSplits, axis = 0) {\n  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'split');\n  const inputs = {\n    x: $x\n  };\n  const attr = {\n    numOrSizeSplits,\n    axis\n  };\n  return _engine.ENGINE.runKernel(_kernel_names.SplitV, inputs, attr);\n}\n\nconst split = (0, _operation.op)({\n  split_\n});\nexports.split = split;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/ops/split.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":16,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":33,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":68,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":62,"column":9},"generated":{"line":68,"column":9}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":68,"column":15}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":63,"column":4},"generated":{"line":68,"column":16}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":68,"column":17}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":63,"column":26},"generated":{"line":68,"column":19}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":68,"column":34}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":63,"column":60},"generated":{"line":68,"column":36}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":63,"column":64},"generated":{"line":68,"column":40}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":63,"column":67},"generated":{"line":68,"column":43}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":68,"column":44}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":63,"column":68},"generated":{"line":68,"column":46}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":69,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":8},"generated":{"line":69,"column":8}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":10},"generated":{"line":69,"column":10}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":13},"generated":{"line":69,"column":13}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":29},"generated":{"line":69,"column":51}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":13},"generated":{"line":69,"column":52}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":32},"generated":{"line":69,"column":54}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":13},"generated":{"line":69,"column":57}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":37},"generated":{"line":69,"column":59}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":13},"generated":{"line":69,"column":66}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":69,"column":67}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":70,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":8},"generated":{"line":70,"column":8}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":14},"generated":{"line":70,"column":14}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":31},"generated":{"line":70,"column":17}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":32},"generated":{"line":71,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":32},"generated":{"line":71,"column":4}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":33},"generated":{"line":71,"column":5}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":35},"generated":{"line":71,"column":7}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":31},"generated":{"line":72,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":72,"column":3}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":73,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":8},"generated":{"line":73,"column":8}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":73,"column":12}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":28},"generated":{"line":73,"column":15}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":29},"generated":{"line":74,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":29},"generated":{"line":74,"column":4}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":28},"generated":{"line":74,"column":19}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":46},"generated":{"line":75,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":46},"generated":{"line":75,"column":4}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":28},"generated":{"line":76,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":76,"column":3}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":77,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":77,"column":9}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":16},"generated":{"line":77,"column":24}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":77,"column":33}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":70,"column":13},"generated":{"line":77,"column":34}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":77,"column":54}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":70,"column":21},"generated":{"line":77,"column":56}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":77,"column":62}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":71,"column":13},"generated":{"line":77,"column":64}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":77,"column":68}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":77,"column":69}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":72,"column":1},"generated":{"line":78,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":7},"generated":{"line":80,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":13},"generated":{"line":80,"column":6}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":18},"generated":{"line":80,"column":11}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":21},"generated":{"line":80,"column":14}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":24},"generated":{"line":80,"column":33}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":25},"generated":{"line":81,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":25},"generated":{"line":81,"column":2}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":24},"generated":{"line":82,"column":0}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":21},"generated":{"line":82,"column":1}},{"source":"../../src/ops/split.ts","name":null,"original":{"line":74,"column":7},"generated":{"line":82,"column":2}}],"sources":{"../../src/ops/split.ts":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport {ENGINE} from '../engine';\r\nimport {SplitV, SplitVAttrs, SplitVInputs} from '../kernel_names';\r\nimport {NamedAttrMap} from '../kernel_registry';\r\nimport {Tensor} from '../tensor';\r\nimport {NamedTensorMap} from '../tensor_types';\r\nimport {convertToTensor} from '../tensor_util_env';\r\nimport {TensorLike} from '../types';\r\n\r\nimport {op} from './operation';\r\n\r\n/**\r\n * Splits a `tf.Tensor` into sub tensors.\r\n *\r\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\r\n * into `numOrSizeSplits` smaller tensors.\r\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\r\n *\r\n * If `numOrSizeSplits` is a number array, splits `x` into\r\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\r\n * same size as `x` except along dimension `axis` where the size is\r\n * `numOrSizeSplits[i]`.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\r\n * const [a, b] = tf.split(x, 2, 1);\r\n * a.print();\r\n * b.print();\r\n *\r\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\r\n * c.print();\r\n * d.print();\r\n * e.print();\r\n * ```\r\n *\r\n * @param x The input tensor to split.\r\n * @param numOrSizeSplits Either an integer indicating the number of\r\n * splits along the axis or an array of integers containing the sizes of\r\n * each output tensor along the axis. If a number then it must evenly divide\r\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\r\n * Can contain one -1 indicating that dimension is to be inferred.\r\n * @param axis The dimension along which to split. Defaults to 0 (the first\r\n * dim).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\r\nfunction split_<T extends Tensor>(\r\n    x: Tensor|TensorLike, numOrSizeSplits: number[]|number, axis = 0): T[] {\r\n  const $x = convertToTensor(x, 'x', 'split');\r\n\r\n  const inputs: SplitVInputs = {x: $x};\r\n  const attr: SplitVAttrs = {numOrSizeSplits, axis};\r\n\r\n  return ENGINE.runKernel(\r\n             SplitV, inputs as {} as NamedTensorMap,\r\n             attr as {} as NamedAttrMap) as {} as T[];\r\n}\r\n\r\nexport const split = op({split_});\r\n"},"lineCount":null}},"error":null,"hash":"8d34e2a43e87f31df956e064725d61ba","cacheData":{"env":{}}}