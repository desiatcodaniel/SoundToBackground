{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","dependencies":[{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\gather_nd.js.map","includedInParent":true,"mtime":1618542803455},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\gather_nd.ts","includedInParent":true,"mtime":1618542804753},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\package.json","includedInParent":true,"mtime":1618542826354},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1618542804579},{"name":"../engine","loc":{"line":17,"column":23},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\gather_nd.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\engine.js"},{"name":"../kernel_names","loc":{"line":18,"column":25},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\gather_nd.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\kernel_names.js"},{"name":"../tensor_util_env","loc":{"line":19,"column":32},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\gather_nd.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\tensor_util_env.js"},{"name":"./operation","loc":{"line":20,"column":19},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\gather_nd.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\operation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gatherND = void 0;\n\nvar _engine = require(\"../engine\");\n\nvar _kernel_names = require(\"../kernel_names\");\n\nvar _tensor_util_env = require(\"../tensor_util_env\");\n\nvar _operation = require(\"./operation\");\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/**\r\n * Gather slices from input tensor into a Tensor with shape specified by\r\n * `indices`.\r\n *\r\n * `indices` is an K-dimensional integer tensor, best thought of as a\r\n * (K-1)-dimensional tensor of indices into input, where each element defines a\r\n * slice of input:\r\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\r\n *\r\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\r\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\r\n * of input, where N = indices.shape[-1].\r\n *\r\n * The last dimension of indices can be at most the rank of input:\r\n * indices.shape[-1] <= input.rank\r\n *\r\n * The last dimension of `indices` corresponds to elements\r\n * (if indices.shape[-1] == input.rank) or slices\r\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\r\n * input.\r\n * The output tensor has shape\r\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\r\n *\r\n * Note that on CPU, if an out of bound index is found, an error is returned. On\r\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\r\n * output value.\r\n *\r\n * ```js\r\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\r\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\r\n * tf.gatherND(input, indices).print() // [10, 11]\r\n * ```\r\n *\r\n * @param x The tensor from which to gather values.\r\n * @param indices Index tensor, must be of type int32.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\r\n */\nfunction gatherND_(x, indices) {\n  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'gatherND', 'int32');\n  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'gatherND');\n  const inputs = {\n    params: $x,\n    indices: $indices\n  };\n  return _engine.ENGINE.runKernel(_kernel_names.GatherNd, inputs);\n}\n\nconst gatherND = (0, _operation.op)({\n  gatherND_\n});\nexports.gatherND = gatherND;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":16,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":33,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":71,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":71,"column":9}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":71,"column":18}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":19},"generated":{"line":71,"column":19}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":71,"column":20}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":41},"generated":{"line":71,"column":22}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":71,"column":29}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":67},"generated":{"line":71,"column":31}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":72,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":8},"generated":{"line":72,"column":8}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":16},"generated":{"line":72,"column":16}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":72,"column":19}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":35},"generated":{"line":72,"column":57}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":72,"column":64}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":44},"generated":{"line":72,"column":66}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":72,"column":75}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":55},"generated":{"line":72,"column":77}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":72,"column":87}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":67},"generated":{"line":72,"column":89}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":72,"column":96}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":72,"column":97}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":73,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":8},"generated":{"line":73,"column":8}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":10},"generated":{"line":73,"column":10}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":13},"generated":{"line":73,"column":13}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":29},"generated":{"line":73,"column":51}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":13},"generated":{"line":73,"column":52}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":32},"generated":{"line":73,"column":54}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":13},"generated":{"line":73,"column":57}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":37},"generated":{"line":73,"column":59}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":13},"generated":{"line":73,"column":69}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":73,"column":70}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":74,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":8},"generated":{"line":74,"column":8}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":14},"generated":{"line":74,"column":14}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":33},"generated":{"line":74,"column":17}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":34},"generated":{"line":75,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":34},"generated":{"line":75,"column":4}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":40},"generated":{"line":75,"column":10}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":42},"generated":{"line":75,"column":12}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":33},"generated":{"line":75,"column":14}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":46},"generated":{"line":76,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":46},"generated":{"line":76,"column":4}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":53},"generated":{"line":76,"column":11}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":55},"generated":{"line":76,"column":13}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":33},"generated":{"line":77,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":77,"column":3}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":78,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":78,"column":9}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":16},"generated":{"line":78,"column":24}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":78,"column":33}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":26},"generated":{"line":78,"column":34}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":78,"column":56}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":36},"generated":{"line":78,"column":58}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":78,"column":64}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":69,"column":2},"generated":{"line":78,"column":65}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":79,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":7},"generated":{"line":81,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":13},"generated":{"line":81,"column":6}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":21},"generated":{"line":81,"column":14}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":24},"generated":{"line":81,"column":17}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":27},"generated":{"line":81,"column":36}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":28},"generated":{"line":82,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":28},"generated":{"line":82,"column":2}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":27},"generated":{"line":83,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":24},"generated":{"line":83,"column":1}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":72,"column":7},"generated":{"line":83,"column":2}}],"sources":{"../../src/ops/gather_nd.ts":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport {ENGINE} from '../engine';\r\nimport {GatherNd, GatherNdInputs} from '../kernel_names';\r\nimport {Tensor} from '../tensor';\r\nimport {NamedTensorMap} from '../tensor_types';\r\nimport {convertToTensor} from '../tensor_util_env';\r\nimport {TensorLike} from '../types';\r\nimport {op} from './operation';\r\n\r\n/**\r\n * Gather slices from input tensor into a Tensor with shape specified by\r\n * `indices`.\r\n *\r\n * `indices` is an K-dimensional integer tensor, best thought of as a\r\n * (K-1)-dimensional tensor of indices into input, where each element defines a\r\n * slice of input:\r\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\r\n *\r\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\r\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\r\n * of input, where N = indices.shape[-1].\r\n *\r\n * The last dimension of indices can be at most the rank of input:\r\n * indices.shape[-1] <= input.rank\r\n *\r\n * The last dimension of `indices` corresponds to elements\r\n * (if indices.shape[-1] == input.rank) or slices\r\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\r\n * input.\r\n * The output tensor has shape\r\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\r\n *\r\n * Note that on CPU, if an out of bound index is found, an error is returned. On\r\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\r\n * output value.\r\n *\r\n * ```js\r\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\r\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\r\n * tf.gatherND(input, indices).print() // [10, 11]\r\n * ```\r\n *\r\n * @param x The tensor from which to gather values.\r\n * @param indices Index tensor, must be of type int32.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\r\n */\r\nfunction gatherND_(x: Tensor|TensorLike, indices: Tensor|TensorLike): Tensor {\r\n  const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\r\n  const $x = convertToTensor(x, 'x', 'gatherND');\r\n\r\n  const inputs: GatherNdInputs = {params: $x, indices: $indices};\r\n\r\n  return ENGINE.runKernel(GatherNd, inputs as {} as NamedTensorMap);\r\n}\r\n\r\nexport const gatherND = op({gatherND_});\r\n"},"lineCount":null}},"error":null,"hash":"f83a40f92194f75070cd00bf19fad428","cacheData":{"env":{}}}