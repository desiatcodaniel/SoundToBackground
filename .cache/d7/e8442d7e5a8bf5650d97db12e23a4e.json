{"id":"node_modules/@tensorflow/tfjs-core/dist/io/types.js","dependencies":[{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\dist\\io\\types.js.map","includedInParent":true,"mtime":1618542803115},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\types.ts","includedInParent":true,"mtime":1618542804673},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\package.json","includedInParent":true,"mtime":1618542826354},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1618542804579}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DTYPE_VALUE_SIZE_MAP = void 0;\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n/* Type definitions for exporting and importing of models. */\n\n/**\r\n * A map from Tensor dtype to number of bytes per element of the Tensor.\r\n */\nconst DTYPE_VALUE_SIZE_MAP = {\n  'float32': 4,\n  'float16': 2,\n  'int32': 4,\n  'uint16': 2,\n  'uint8': 1,\n  'bool': 1,\n  'complex64': 8\n};\nexports.DTYPE_VALUE_SIZE_MAP = DTYPE_VALUE_SIZE_MAP;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/io/types.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":25,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":27,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":7},"generated":{"line":30,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":13},"generated":{"line":30,"column":6}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":33},"generated":{"line":30,"column":26}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":30,"column":29}},{"source":"../../src/io/types.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":31,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":24,"column":13},"generated":{"line":31,"column":13}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":31,"column":14}},{"source":"../../src/io/types.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":32,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":25,"column":13},"generated":{"line":32,"column":13}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":32,"column":14}},{"source":"../../src/io/types.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":33,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":26,"column":11},"generated":{"line":33,"column":11}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":33,"column":12}},{"source":"../../src/io/types.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":34,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":27,"column":12},"generated":{"line":34,"column":12}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":34,"column":13}},{"source":"../../src/io/types.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":35,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":35,"column":11}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":35,"column":12}},{"source":"../../src/io/types.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":36,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":29,"column":10},"generated":{"line":36,"column":10}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":36,"column":11}},{"source":"../../src/io/types.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":37,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":30,"column":15},"generated":{"line":37,"column":15}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":63},"generated":{"line":38,"column":0}},{"source":"../../src/io/types.ts","name":null,"original":{"line":23,"column":7},"generated":{"line":38,"column":1}}],"sources":{"../../src/io/types.ts":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n/* Type definitions for exporting and importing of models. */\r\n\r\n/**\r\n * A map from Tensor dtype to number of bytes per element of the Tensor.\r\n */\r\nexport const DTYPE_VALUE_SIZE_MAP: {[dtype: string]: number} = {\r\n  'float32': 4,\r\n  'float16': 2,\r\n  'int32': 4,\r\n  'uint16': 2,\r\n  'uint8': 1,\r\n  'bool': 1,\r\n  'complex64': 8\r\n};\r\n\r\n/**\r\n * A weight manifest.\r\n *\r\n * The weight manifest consists of an ordered list of weight-manifest groups.\r\n * Each weight-manifest group (\"group\" for short hereafter) consists of a\r\n * number of weight values stored in a number of paths.\r\n * See the documentation of `WeightManifestGroupConfig` below for more details.\r\n */\r\nexport declare type WeightsManifestConfig = WeightsManifestGroupConfig[];\r\n\r\n/**\r\n * A weight-manifest group.\r\n *\r\n * Consists of an ordered list of weight values encoded in binary format,\r\n * stored in an ordered list of paths.\r\n */\r\nexport declare interface WeightsManifestGroupConfig {\r\n  /**\r\n   * An ordered list of paths.\r\n   *\r\n   * Paths are intentionally abstract in order to be general. For example, they\r\n   * can be relative URL paths or relative paths on the file system.\r\n   */\r\n  paths: string[];\r\n\r\n  /**\r\n   * Specifications of the weights stored in the paths.\r\n   */\r\n  weights: WeightsManifestEntry[];\r\n}\r\n\r\n/**\r\n * Group to which the weight belongs.\r\n *\r\n * - 'optimizer': Weight from a stateful optimizer.\r\n */\r\nexport type WeightGroup = 'model'|'optimizer';\r\n\r\n/**\r\n * An entry in the weight manifest.\r\n *\r\n * The entry contains specification of a weight.\r\n */\r\nexport declare interface WeightsManifestEntry {\r\n  /**\r\n   * Name of the weight, e.g., 'Dense_1/bias'\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Shape of the weight.\r\n   */\r\n  shape: number[];\r\n\r\n  /**\r\n   * Data type of the weight.\r\n   */\r\n  dtype: 'float32'|'int32'|'bool'|'string'|'complex64';\r\n\r\n  /**\r\n   * Type of the weight.\r\n   *\r\n   * Optional.\r\n   *\r\n   * The value 'optimizer' indicates the weight belongs to an optimizer\r\n   * (i.e., used only during model training and not during inference).\r\n   */\r\n  group?: WeightGroup;\r\n\r\n  /**\r\n   * Information for dequantization of the weight.\r\n   */\r\n  quantization?: {\r\n    scale?: number,  // The scaling constant to multiply by.\r\n    min?: number,    // The (possibly nudged) minimum weight to add.\r\n       dtype: 'uint16'|'uint8'|'float16'  // The dtype of the quantized weights.\r\n  };\r\n}\r\n\r\n/**\r\n * Options for saving a model.\r\n * @innamespace io\r\n */\r\nexport interface SaveConfig {\r\n  /**\r\n   * Whether to save only the trainable weights of the model, ignoring the\r\n   * non-trainable ones.\r\n   */\r\n  trainableOnly?: boolean;\r\n\r\n  /**\r\n   * Whether the optimizer will be saved (if exists).\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  includeOptimizer?: boolean;\r\n}\r\n\r\n/**\r\n * Result of a saving operation.\r\n */\r\nexport interface SaveResult {\r\n  /**\r\n   * Information about the model artifacts saved.\r\n   */\r\n  modelArtifactsInfo: ModelArtifactsInfo;\r\n\r\n  /**\r\n   * HTTP responses from the server that handled the model-saving request (if\r\n   * any). This is applicable only to server-based saving routes.\r\n   */\r\n  responses?: Response[];\r\n\r\n  /**\r\n   * Error messages and related data (if any).\r\n   */\r\n  errors?: Array<{}|string>;\r\n}\r\n\r\nexport declare interface ModelArtifactsInfo {\r\n  /**\r\n   * Timestamp for when the model is saved.\r\n   */\r\n  dateSaved: Date;\r\n\r\n  /**\r\n   * TODO (cais,yassogba) consider removing GraphDef as GraphDefs now\r\n   * come in a JSON format and none of our IOHandlers support a non json\r\n   * format. We could conder replacing this with 'Binary' if we want to\r\n   * allow future handlers to save to non json formats (though they will\r\n   * probably want more information than 'Binary').\r\n   * Type of the model topology\r\n   *\r\n   * Type of the model topology\r\n   *\r\n   * Possible values:\r\n   *   - JSON: JSON config (human-readable, e.g., Keras JSON).\r\n   *   - GraphDef: TensorFlow\r\n   *     [GraphDef](https://www.tensorflow.org/extend/tool_developers/#graphdef)\r\n   *     protocol buffer (binary).\r\n   */\r\n  modelTopologyType: 'JSON'|'GraphDef';\r\n\r\n  /**\r\n   * Size of model topology (Keras JSON or GraphDef), in bytes.\r\n   */\r\n  modelTopologyBytes?: number;\r\n\r\n  /**\r\n   * Size of weight specification or manifest, in bytes.\r\n   */\r\n  weightSpecsBytes?: number;\r\n\r\n  /**\r\n   * Size of weight value data, in bytes.\r\n   */\r\n  weightDataBytes?: number;\r\n}\r\n\r\n/** Model training configuration. */\r\nexport declare interface TrainingConfig {\r\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\r\n  // See\r\n  // tslint:disable-next-line:max-line-length\r\n  // https://github.com/tensorflow/tfjs-layers/blob/master/src/keras_format/training_config.ts\r\n  /** Optimizer used for the model training. */\r\n  optimizer_config: {};\r\n\r\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\r\n  /** Loss function(s) for the model's output(s). */\r\n  loss: string|string[]|{[key: string]: string};\r\n\r\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\r\n  /** Metric function(s) for the model's output(s). */\r\n  metrics?: string[]|{[key: string]: string};\r\n\r\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\r\n  weighted_metrics?: string[];\r\n\r\n  // TODO(cais): Tighten the typing once keras spec is available to tfjs-core.\r\n  sample_weight_mode?: string;\r\n\r\n  loss_weights?: number[]|{[key: string]: number};\r\n}\r\n\r\n/**\r\n * The serialized artifacts of a model, including topology and weights.\r\n *\r\n * The `modelTopology`, `trainingConfig`, `weightSpecs` and `weightData` fields\r\n * of this interface are optional, in order to support topology- or weights-only\r\n * saving and loading.\r\n *\r\n * Note this interface is used internally in IOHandlers.  For the file format\r\n * written to disk as `model.json`, see `ModelJSON`.\r\n */\r\nexport declare interface ModelArtifacts {\r\n  /**\r\n   * Model topology.\r\n   *\r\n   * For Keras-style `tf.Model`s, this is a JSON object.\r\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\r\n   * encoding of the `GraphDef` protocol buffer.\r\n   */\r\n  modelTopology?: {}|ArrayBuffer;\r\n\r\n  /**\r\n   * Serialized configuration for the model's training.\r\n   */\r\n  trainingConfig?: TrainingConfig;\r\n\r\n  /**\r\n   * Weight specifications.\r\n   *\r\n   * This corresponds to the weightsData below.\r\n   */\r\n  weightSpecs?: WeightsManifestEntry[];\r\n\r\n  /**\r\n   * Binary buffer for all weight values concatenated in the order specified\r\n   * by `weightSpecs`.\r\n   */\r\n  weightData?: ArrayBuffer;\r\n\r\n  /**\r\n   * Hard-coded format name for models saved from TensorFlow.js or converted\r\n   * by TensorFlow.js Converter.\r\n   */\r\n  format?: string;\r\n\r\n  /**\r\n   * What library is responsible for originally generating this artifact.\r\n   *\r\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\r\n   */\r\n  generatedBy?: string;\r\n\r\n  /**\r\n   * What library or tool is responsible for converting the original model\r\n   * to this format, applicable only if the model is output by a converter.\r\n   *\r\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\r\n   *\r\n   * A value of `null` means the model artifacts are generated without any\r\n   * conversion process (e.g., saved directly from a TensorFlow.js\r\n   * `tf.LayersModel` instance.)\r\n   */\r\n  convertedBy?: string|null;\r\n\r\n  /**\r\n   * Inputs and outputs signature for saved model.\r\n   */\r\n  signature?: {};\r\n\r\n  /**\r\n   * User-defined metadata about the model.\r\n   */\r\n  userDefinedMetadata?: {[key: string]: {}};\r\n\r\n  /**\r\n   * Initializer for the model.\r\n   */\r\n  modelInitializer?: {};\r\n}\r\n\r\n/**\r\n * The on-disk format of the `model.json` file.\r\n *\r\n * TF.js 1.0 always populates the optional fields when writing model.json.\r\n * Prior versions did not provide those fields.\r\n */\r\nexport declare interface ModelJSON {\r\n  /**\r\n   * Model topology.\r\n   *\r\n   * For Keras-style `tf.Model`s, this is a JSON object.\r\n   * For TensorFlow-style models (e.g., `SavedModel`), this is the JSON\r\n   * encoding of the `GraphDef` protocol buffer.\r\n   */\r\n  modelTopology: {};\r\n\r\n  /** Model training configuration. */\r\n  trainingConfig?: TrainingConfig;\r\n\r\n  /**\r\n   * Weights manifest.\r\n   *\r\n   * The weights manifest consists of an ordered list of weight-manifest\r\n   * groups. Each weight-manifest group consists of a number of weight values\r\n   * stored in a number of paths. See the documentation of\r\n   * `WeightsManifestConfig` for more details.\r\n   */\r\n  weightsManifest: WeightsManifestConfig;\r\n\r\n  /**\r\n   * Hard-coded format name for models saved from TensorFlow.js or converted\r\n   * by TensorFlow.js Converter.\r\n   */\r\n  format?: string;\r\n\r\n  /**\r\n   * What library is responsible for originally generating this artifact.\r\n   *\r\n   * Used for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.\r\n   */\r\n  generatedBy?: string;\r\n\r\n  /**\r\n   * What library or tool is responsible for converting the original model\r\n   * to this format, applicable only if the model is output by a converter.\r\n   *\r\n   * Used for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\r\n   *\r\n   * A value of `null` means the model artifacts are generated without any\r\n   * conversion process (e.g., saved directly from a TensorFlow.js\r\n   * `tf.LayersModel` instance.)\r\n   */\r\n  convertedBy?: string|null;\r\n\r\n  /**\r\n   * Inputs and outputs signature for saved model.\r\n   */\r\n  signature?: {};\r\n\r\n  /**\r\n   * User-defined metadata about the model.\r\n   */\r\n  userDefinedMetadata?: {[key: string]: {}};\r\n\r\n  /**\r\n   * Initializer for the model.\r\n   */\r\n  modelInitializer?: {};\r\n}\r\n\r\n/**\r\n * Type definition for handlers of loading operations.\r\n */\r\nexport type LoadHandler = () => Promise<ModelArtifacts>;\r\n\r\n/**\r\n * Type definition for handlers of saving operations.\r\n */\r\nexport type SaveHandler = (modelArtifact: ModelArtifacts) =>\r\n    Promise<SaveResult>;\r\n\r\n/**\r\n * Interface for a model import/export handler.\r\n *\r\n * The `save` and `load` handlers are both optional, in order to allow handlers\r\n * that support only saving or loading.\r\n */\r\n// tslint:disable-next-line:interface-name\r\nexport interface IOHandler {\r\n  save?: SaveHandler;\r\n  load?: LoadHandler;\r\n}\r\n\r\n/**\r\n * An interface for the manager of a model store.\r\n *\r\n * A model store is defined as a storage medium on which multiple models can\r\n * be stored. Each stored model has a unique `path` as its identifier.\r\n * A `ModelStoreManager` for the store allows actions including\r\n *\r\n * - Listing the models stored in the store.\r\n * - Deleting a model from the store.\r\n */\r\nexport interface ModelStoreManager {\r\n  /**\r\n   * List all models in the model store.\r\n   *\r\n   * @returns A dictionary mapping paths of existing models to their\r\n   *   model artifacts info. Model artifacts info include type of the model's\r\n   *   topology, byte sizes of the topology, weights, etc.\r\n   */\r\n  listModels(): Promise<{[path: string]: ModelArtifactsInfo}>;\r\n\r\n  /**\r\n   * Remove a model specified by `path`.\r\n   *\r\n   * @param path\r\n   * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\r\n   *   is successful).\r\n   * @throws Error if deletion fails, e.g., if no model exists at `path`.\r\n   */\r\n  removeModel(path: string): Promise<ModelArtifactsInfo>;\r\n}\r\n\r\n/**\r\n * Callback for the progress of a long-running action such as an HTTP\r\n * request for a large binary object.\r\n *\r\n * `fraction` should be a number in the [0, 1] interval, indicating how\r\n * much of the action has completed.\r\n */\r\nexport type OnProgressCallback = (fraction: number) => void;\r\n\r\n/** @innamespace io */\r\nexport interface LoadOptions {\r\n  /**\r\n   * RequestInit (options) for HTTP requests.\r\n   *\r\n   * For detailed information on the supported fields, see\r\n   * [https://developer.mozilla.org/en-US/docs/Web/API/Request/Request](\r\n   *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request)\r\n   */\r\n  requestInit?: RequestInit;\r\n\r\n  /**\r\n   * Progress callback.\r\n   */\r\n  onProgress?: OnProgressCallback;\r\n\r\n  /**\r\n   * A function used to override the `window.fetch` function.\r\n   */\r\n  fetchFunc?: Function;\r\n\r\n  /**\r\n   * Strict loading model: whether extraneous weights or missing\r\n   * weights should trigger an `Error`.\r\n   *\r\n   * If `true`, require that the provided weights exactly match those\r\n   * required by the layers. `false` means that both extra weights\r\n   * and missing weights will be silently ignored.\r\n   *\r\n   * Default: `true`.\r\n   */\r\n  strict?: boolean;\r\n\r\n  /**\r\n   * Path prefix for weight files, by default this is calculated from the\r\n   * path of the model JSON file.\r\n   *\r\n   * For instance, if the path to the model JSON file is\r\n   * `http://localhost/foo/model.json`, then the default path prefix will be\r\n   * `http://localhost/foo/`. If a weight file has the path value\r\n   * `group1-shard1of2` in the weight manifest, then the weight file will be\r\n   * loaded from `http://localhost/foo/group1-shard1of2` by default. However,\r\n   * if you provide a `weightPathPrefix` value of\r\n   * `http://localhost/foo/alt-weights`, then the weight file will be loaded\r\n   * from the path `http://localhost/foo/alt-weights/group1-shard1of2` instead.\r\n   */\r\n  weightPathPrefix?: string;\r\n\r\n  /**\r\n   * Whether the module or model is to be loaded from TF Hub.\r\n   *\r\n   * Setting this to `true` allows passing a TF-Hub module URL, omitting the\r\n   * standard model file name and the query parameters.\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  fromTFHub?: boolean;\r\n\r\n  /**\r\n   * An async function to convert weight file name to URL. The weight file\r\n   * names are stored in model.json's weightsManifest.paths field. By default we\r\n   * consider weight files are colocated with the model.json file. For example:\r\n   *     model.json URL: https://www.google.com/models/1/model.json\r\n   *     group1-shard1of1.bin url:\r\n   *        https://www.google.com/models/1/group1-shard1of1.bin\r\n   *\r\n   * With this func you can convert the weight file name to any URL.\r\n   */\r\n  weightUrlConverter?: (weightFileName: string) => Promise<string>;\r\n}\r\n\r\n/**\r\n * Additional options for Platform.fetch\r\n */\r\nexport interface RequestDetails {\r\n  /**\r\n   * Is this request for a binary file (as opposed to a json file)\r\n   */\r\n  isBinary?: boolean;\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"7b1742afa2b0d01dc8838f54af3e9c73","cacheData":{"env":{}}}