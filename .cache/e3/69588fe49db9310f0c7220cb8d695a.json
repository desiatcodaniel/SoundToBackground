{"id":"node_modules/@tensorflow/tfjs-layers/dist/exports.js","dependencies":[{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports.js.map","includedInParent":true,"mtime":1618542805206},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\src\\exports.ts","includedInParent":true,"mtime":1618542805545},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\package.json","includedInParent":true,"mtime":1618542826354},{"name":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\package.json","includedInParent":true,"mtime":1618542805530},{"name":"./base_callbacks","loc":{"line":10,"column":44},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\base_callbacks.js"},{"name":"./engine/input_layer","loc":{"line":11,"column":23},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\input_layer.js"},{"name":"./engine/training","loc":{"line":12,"column":28},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\engine\\training.js"},{"name":"./models","loc":{"line":13,"column":52},"parent":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\exports.js","resolved":"C:\\Users\\Daniel\\Documents\\SoundToBackground\\node_modules\\@tensorflow\\tfjs-layers\\dist\\models.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.model = model;\nexports.sequential = sequential;\nexports.loadLayersModel = loadLayersModel;\nexports.input = input;\nexports.registerCallbackConstructor = registerCallbackConstructor;\n\nvar _base_callbacks = require(\"./base_callbacks\");\n\nvar _input_layer = require(\"./engine/input_layer\");\n\nvar _training = require(\"./engine/training\");\n\nvar _models = require(\"./models\");\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// LayersModel and related factory methods.\n\n/**\r\n * A model is a data structure that consists of `Layers` and defines inputs\r\n * and outputs.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.model` is more generic, supporting an arbitrary graph (without\r\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\r\n * stack of layers.\r\n *\r\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\r\n * are used to wire input(s) to output(s).\r\n *\r\n * For example, the following code snippet defines a model consisting of\r\n * two `dense` layers, with 10 and 4 units, respectively.\r\n *\r\n * ```js\r\n * // Define input, which has a size of 5 (not including batch dimension).\r\n * const input = tf.input({shape: [5]});\r\n *\r\n * // First dense layer uses relu activation.\r\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\r\n * // Second dense layer uses softmax activation.\r\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\r\n *\r\n * // Obtain the output symbolic tensor by applying the layers on the input.\r\n * const output = denseLayer2.apply(denseLayer1.apply(input));\r\n *\r\n * // Create the model based on the inputs.\r\n * const model = tf.model({inputs: input, outputs: output});\r\n *\r\n * // The model can be used for training, evaluation and prediction.\r\n * // For example, the following line runs prediction with the model on\r\n * // some fake data.\r\n * model.predict(tf.ones([2, 5])).print();\r\n * ```\r\n * See also:\r\n *   `tf.sequential`, `tf.loadLayersModel`.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */\nfunction model(args) {\n  return new _training.LayersModel(args);\n}\n/**\r\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\r\n * outputs of one layer are the inputs to the next layer, i.e. the model\r\n * topology is a simple 'stack' of layers, with no branching or skipping.\r\n *\r\n * This means that the first layer passed to a `tf.Sequential` model should have\r\n * a defined input shape. What that means is that it should have received an\r\n * `inputShape` or `batchInputShape` argument, or for some type of layers\r\n * (recurrent, Dense...) an `inputDim` argument.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\r\n * `tf.model` is more generic and supports an arbitrary graph (without\r\n * cycles) of layers.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have an input shape defined.\r\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output, which equals\r\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\r\n * // 2nd is the output size of the model's last layer.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * It is also possible to specify a batch size (with potentially undetermined\r\n * batch dimension, denoted by \"null\") for the first layer using the\r\n * `batchInputShape` key. The following example is equivalent to the above:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have a defined input shape\r\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * You can also use an `Array` of already-constructed `Layer`s to create\r\n * a `tf.Sequential` model:\r\n *\r\n * ```js\r\n * const model = tf.sequential({\r\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\r\n *            tf.layers.dense({units: 4})]\r\n * });\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */\n\n\nfunction sequential(config) {\n  return new _models.Sequential(config);\n}\n/**\r\n * Load a model composed of Layer objects, including its topology and optionally\r\n * weights. See the Tutorial named \"How to import a Keras Model\" for usage\r\n * examples.\r\n *\r\n * This method is applicable to:\r\n *\r\n * 1. Models created with the `tf.layers.*`, `tf.sequential`, and\r\n * `tf.model` APIs of TensorFlow.js and later saved with the\r\n * `tf.LayersModel.save` method.\r\n * 2. Models converted from Keras or TensorFlow tf.keras using the\r\n * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).\r\n *\r\n * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted\r\n * forms. For those models, use `tf.loadGraphModel`.\r\n *\r\n * Example 1. Load a model from an HTTP server.\r\n *\r\n * ```js\r\n * const model = await tf.loadLayersModel(\r\n *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\r\n * model.summary();\r\n * ```\r\n *\r\n * Example 2: Save `model`'s topology and weights to browser [local\r\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('localstorage://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 3. Saving `model`'s topology and weights to browser\r\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('indexeddb://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 4. Load a model from user-selected files from HTML\r\n * [file input\r\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\r\n *\r\n * ```js\r\n * // Note: this code snippet will not work without the HTML elements in the\r\n * //   page\r\n * const jsonUpload = document.getElementById('json-upload');\r\n * const weightsUpload = document.getElementById('weights-upload');\r\n *\r\n * const model = await tf.loadLayersModel(\r\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\r\n * ```\r\n *\r\n * @param pathOrIOHandler Can be either of the two formats\r\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\r\n *      the model in the canonical TensorFlow.js format. For file://\r\n *      (tfjs-node-only), http:// and https:// schemas, the path can be\r\n *      either absolute or relative.\r\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\r\n *      method.\r\n * @param options Optional configuration arguments for the model loading,\r\n *   including:\r\n *   - `strict`: Require that the provided weights exactly match those required\r\n *     by the layers.  Default true.  Passing false means that both extra\r\n *     weights and missing weights will be silently ignored.\r\n *   - `onProgress`: A function of the signature `(fraction: number) => void',\r\n *     that can be used as the progress callback for the model loading.\r\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\r\n *     loaded.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Loading'}\r\n */\n\n\nfunction loadLayersModel(pathOrIOHandler, options) {\n  if (options == null) {\n    options = {};\n  }\n\n  return (0, _models.loadLayersModelInternal)(pathOrIOHandler, options);\n}\n/**\r\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\r\n *\r\n * Users should call the `input` factory function for\r\n * consistency with other generator functions.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * // Defines a simple logistic regression model with 32 dimensional input\r\n * // and 3 dimensional output.\r\n * const x = tf.input({shape: [32]});\r\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\r\n * const model = tf.model({inputs: x, outputs: y});\r\n * model.predict(tf.ones([2, 32])).print();\r\n * ```\r\n *\r\n * Note: `input` is only necessary when using `model`. When using\r\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\r\n * as the first layer.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Inputs'}\r\n */\n\n\nfunction input(config) {\n  return (0, _input_layer.Input)(config);\n}\n\nfunction registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n  _base_callbacks.CallbackConstructorRegistry.registerCallbackConstructor(verbosityLevel, callbackConstructor);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":12,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":14,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":16,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":18,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":29,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":30,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":31,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":32,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":34,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":74,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":16},"generated":{"line":74,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":74,"column":14}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":22},"generated":{"line":74,"column":15}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":74,"column":19}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":41},"generated":{"line":74,"column":21}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":75,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":75,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":13},"generated":{"line":75,"column":13}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":75,"column":34}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":25},"generated":{"line":75,"column":35}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":75,"column":39}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":75,"column":40}},{"source":"../src/exports.ts","name":null,"original":{"line":72,"column":1},"generated":{"line":76,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":74,"column":0},"generated":{"line":77,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":6},"generated":{"line":139,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":16},"generated":{"line":139,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":6},"generated":{"line":139,"column":19}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":27},"generated":{"line":139,"column":20}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":6},"generated":{"line":139,"column":26}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":50},"generated":{"line":139,"column":28}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":2},"generated":{"line":140,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":9},"generated":{"line":140,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":140,"column":13}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":9},"generated":{"line":140,"column":31}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":24},"generated":{"line":140,"column":32}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":9},"generated":{"line":140,"column":38}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":2},"generated":{"line":140,"column":39}},{"source":"../src/exports.ts","name":null,"original":{"line":136,"column":1},"generated":{"line":141,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":138,"column":0},"generated":{"line":142,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":229,"column":6},"generated":{"line":235,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":229,"column":16},"generated":{"line":235,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":229,"column":6},"generated":{"line":235,"column":24}},{"source":"../src/exports.ts","name":null,"original":{"line":230,"column":4},"generated":{"line":235,"column":25}},{"source":"../src/exports.ts","name":null,"original":{"line":229,"column":6},"generated":{"line":235,"column":40}},{"source":"../src/exports.ts","name":null,"original":{"line":231,"column":4},"generated":{"line":235,"column":42}},{"source":"../src/exports.ts","name":null,"original":{"line":229,"column":6},"generated":{"line":235,"column":49}},{"source":"../src/exports.ts","name":null,"original":{"line":231,"column":28},"generated":{"line":235,"column":51}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":236,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":6},"generated":{"line":236,"column":6}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":13},"generated":{"line":236,"column":13}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":17},"generated":{"line":236,"column":17}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":2},"generated":{"line":236,"column":21}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":23},"generated":{"line":236,"column":23}},{"source":"../src/exports.ts","name":null,"original":{"line":233,"column":4},"generated":{"line":237,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":233,"column":4},"generated":{"line":237,"column":4}},{"source":"../src/exports.ts","name":null,"original":{"line":233,"column":11},"generated":{"line":237,"column":11}},{"source":"../src/exports.ts","name":null,"original":{"line":233,"column":14},"generated":{"line":237,"column":14}},{"source":"../src/exports.ts","name":null,"original":{"line":233,"column":4},"generated":{"line":237,"column":16}},{"source":"../src/exports.ts","name":null,"original":{"line":234,"column":3},"generated":{"line":238,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":2},"generated":{"line":240,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":9},"generated":{"line":240,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":33},"generated":{"line":240,"column":46}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":9},"generated":{"line":240,"column":61}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":50},"generated":{"line":240,"column":63}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":9},"generated":{"line":240,"column":70}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":2},"generated":{"line":240,"column":71}},{"source":"../src/exports.ts","name":null,"original":{"line":236,"column":1},"generated":{"line":241,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":238,"column":0},"generated":{"line":242,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":6},"generated":{"line":267,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":16},"generated":{"line":267,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":6},"generated":{"line":267,"column":14}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":22},"generated":{"line":267,"column":15}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":6},"generated":{"line":267,"column":21}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":41},"generated":{"line":267,"column":23}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":2},"generated":{"line":268,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":9},"generated":{"line":268,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":15},"generated":{"line":268,"column":33}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":9},"generated":{"line":268,"column":39}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":2},"generated":{"line":268,"column":40}},{"source":"../src/exports.ts","name":null,"original":{"line":263,"column":1},"generated":{"line":269,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":271,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":265,"column":16},"generated":{"line":271,"column":9}},{"source":"../src/exports.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":271,"column":36}},{"source":"../src/exports.ts","name":null,"original":{"line":266,"column":4},"generated":{"line":271,"column":37}},{"source":"../src/exports.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":271,"column":51}},{"source":"../src/exports.ts","name":null,"original":{"line":267,"column":4},"generated":{"line":271,"column":53}},{"source":"../src/exports.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":271,"column":72}},{"source":"../src/exports.ts","name":null,"original":{"line":267,"column":48},"generated":{"line":271,"column":74}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":2},"generated":{"line":272,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":30},"generated":{"line":272,"column":46}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":2},"generated":{"line":272,"column":73}},{"source":"../src/exports.ts","name":null,"original":{"line":269,"column":6},"generated":{"line":272,"column":74}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":2},"generated":{"line":272,"column":88}},{"source":"../src/exports.ts","name":null,"original":{"line":269,"column":22},"generated":{"line":272,"column":90}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":2},"generated":{"line":272,"column":109}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":273,"column":0}}],"sources":{"../src/exports.ts":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * Exported functions.\r\n */\r\n\r\nimport {io} from '@tensorflow/tfjs-core';\r\n\r\nimport {BaseCallbackConstructor, CallbackConstructorRegistry} from './base_callbacks';\r\nimport {ContainerArgs} from './engine/container';\r\nimport {Input, InputConfig,} from './engine/input_layer';\r\nimport {SymbolicTensor} from './engine/topology';\r\nimport {LayersModel} from './engine/training';\r\nimport {loadLayersModelInternal, Sequential, SequentialArgs} from './models';\r\n\r\n// TODO(cais): Add doc string to all the public static functions in this\r\n//   class; include exectuable JavaScript code snippets where applicable\r\n//   (b/74074458).\r\n\r\n// LayersModel and related factory methods.\r\n\r\n/**\r\n * A model is a data structure that consists of `Layers` and defines inputs\r\n * and outputs.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.model` is more generic, supporting an arbitrary graph (without\r\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\r\n * stack of layers.\r\n *\r\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\r\n * are used to wire input(s) to output(s).\r\n *\r\n * For example, the following code snippet defines a model consisting of\r\n * two `dense` layers, with 10 and 4 units, respectively.\r\n *\r\n * ```js\r\n * // Define input, which has a size of 5 (not including batch dimension).\r\n * const input = tf.input({shape: [5]});\r\n *\r\n * // First dense layer uses relu activation.\r\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\r\n * // Second dense layer uses softmax activation.\r\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\r\n *\r\n * // Obtain the output symbolic tensor by applying the layers on the input.\r\n * const output = denseLayer2.apply(denseLayer1.apply(input));\r\n *\r\n * // Create the model based on the inputs.\r\n * const model = tf.model({inputs: input, outputs: output});\r\n *\r\n * // The model can be used for training, evaluation and prediction.\r\n * // For example, the following line runs prediction with the model on\r\n * // some fake data.\r\n * model.predict(tf.ones([2, 5])).print();\r\n * ```\r\n * See also:\r\n *   `tf.sequential`, `tf.loadLayersModel`.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */\r\nexport function model(args: ContainerArgs): LayersModel {\r\n  return new LayersModel(args);\r\n}\r\n\r\n/**\r\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\r\n * outputs of one layer are the inputs to the next layer, i.e. the model\r\n * topology is a simple 'stack' of layers, with no branching or skipping.\r\n *\r\n * This means that the first layer passed to a `tf.Sequential` model should have\r\n * a defined input shape. What that means is that it should have received an\r\n * `inputShape` or `batchInputShape` argument, or for some type of layers\r\n * (recurrent, Dense...) an `inputDim` argument.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\r\n * `tf.model` is more generic and supports an arbitrary graph (without\r\n * cycles) of layers.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have an input shape defined.\r\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output, which equals\r\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\r\n * // 2nd is the output size of the model's last layer.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * It is also possible to specify a batch size (with potentially undetermined\r\n * batch dimension, denoted by \"null\") for the first layer using the\r\n * `batchInputShape` key. The following example is equivalent to the above:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have a defined input shape\r\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * You can also use an `Array` of already-constructed `Layer`s to create\r\n * a `tf.Sequential` model:\r\n *\r\n * ```js\r\n * const model = tf.sequential({\r\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\r\n *            tf.layers.dense({units: 4})]\r\n * });\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */\r\nexport function sequential(config?: SequentialArgs): Sequential {\r\n  return new Sequential(config);\r\n}\r\n\r\n/**\r\n * Load a model composed of Layer objects, including its topology and optionally\r\n * weights. See the Tutorial named \"How to import a Keras Model\" for usage\r\n * examples.\r\n *\r\n * This method is applicable to:\r\n *\r\n * 1. Models created with the `tf.layers.*`, `tf.sequential`, and\r\n * `tf.model` APIs of TensorFlow.js and later saved with the\r\n * `tf.LayersModel.save` method.\r\n * 2. Models converted from Keras or TensorFlow tf.keras using the\r\n * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).\r\n *\r\n * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted\r\n * forms. For those models, use `tf.loadGraphModel`.\r\n *\r\n * Example 1. Load a model from an HTTP server.\r\n *\r\n * ```js\r\n * const model = await tf.loadLayersModel(\r\n *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\r\n * model.summary();\r\n * ```\r\n *\r\n * Example 2: Save `model`'s topology and weights to browser [local\r\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('localstorage://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 3. Saving `model`'s topology and weights to browser\r\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('indexeddb://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 4. Load a model from user-selected files from HTML\r\n * [file input\r\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\r\n *\r\n * ```js\r\n * // Note: this code snippet will not work without the HTML elements in the\r\n * //   page\r\n * const jsonUpload = document.getElementById('json-upload');\r\n * const weightsUpload = document.getElementById('weights-upload');\r\n *\r\n * const model = await tf.loadLayersModel(\r\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\r\n * ```\r\n *\r\n * @param pathOrIOHandler Can be either of the two formats\r\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\r\n *      the model in the canonical TensorFlow.js format. For file://\r\n *      (tfjs-node-only), http:// and https:// schemas, the path can be\r\n *      either absolute or relative.\r\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\r\n *      method.\r\n * @param options Optional configuration arguments for the model loading,\r\n *   including:\r\n *   - `strict`: Require that the provided weights exactly match those required\r\n *     by the layers.  Default true.  Passing false means that both extra\r\n *     weights and missing weights will be silently ignored.\r\n *   - `onProgress`: A function of the signature `(fraction: number) => void',\r\n *     that can be used as the progress callback for the model loading.\r\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\r\n *     loaded.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Loading'}\r\n */\r\nexport function loadLayersModel(\r\n    pathOrIOHandler: string|io.IOHandler,\r\n    options?: io.LoadOptions): Promise<LayersModel> {\r\n  if (options == null) {\r\n    options = {};\r\n  }\r\n  return loadLayersModelInternal(pathOrIOHandler, options);\r\n}\r\n\r\n/**\r\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\r\n *\r\n * Users should call the `input` factory function for\r\n * consistency with other generator functions.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * // Defines a simple logistic regression model with 32 dimensional input\r\n * // and 3 dimensional output.\r\n * const x = tf.input({shape: [32]});\r\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\r\n * const model = tf.model({inputs: x, outputs: y});\r\n * model.predict(tf.ones([2, 32])).print();\r\n * ```\r\n *\r\n * Note: `input` is only necessary when using `model`. When using\r\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\r\n * as the first layer.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Inputs'}\r\n */\r\nexport function input(config: InputConfig): SymbolicTensor {\r\n  return Input(config);\r\n}\r\n\r\nexport function registerCallbackConstructor(\r\n    verbosityLevel: number,\r\n    callbackConstructor: BaseCallbackConstructor): void {\r\n  CallbackConstructorRegistry.registerCallbackConstructor(\r\n      verbosityLevel, callbackConstructor);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"c8ebe9993dda10ea4e9664e877768a63","cacheData":{"env":{}}}